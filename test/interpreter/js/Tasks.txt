Tests are based on ECMA_Conformance: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf

- bestPractice: Skipping ("use strict")
- ch06: Skipping (unicode)
- ch07: Skipping because it is related to lexical conventions
- ch08: Types!
    - 8.1: undefined type (test 000 in js/)
    - 8.2: the null type (test 001 in js/)
    - 8.3: the Boolean type (test 002 in js/)
    - 8.4: the String type (test 003 in js/)
        - 8.4 A7.x - eval assign string to variable skipped (return later)
    - 8.5: the Number type (test 004 in js/)
    - 8.6: the Object type (test 005 in js/)
        - S 8.6.2_A8
    - 8.7: reference specification type (test 006 in js/)
        - 8.7.2 skipped (sealing objects, not crucial now)
    - 8.8: list specification type (test 007 in js/)
    - 8.12: algorithms for object internal methods (test 008 in js/)
        - 8.14.4-8 (skipped, sealing objects)
        - 8.12.5-3 (skipped)
        - 8.12.8 (skipped)
 - ch09: Type Conversion and Testing
    - 9.1: ToPrimitive (test 009 in js/)
    - 9.2: ToBoolean (test 009 in js/)
    - 9.3: ToNumber
        -  9.3.1 - ToNumber to String type (test 010 in js/)
        -  9.3.rest - (test 011 in js/)
    - 9.4: ToInteger (test 012 in js/)
    - 9.5: ToInt32 (test 013 in js/)
        - _A3.1_T4 - skipped, throwing errors
    - 9.6: ToUint32 (test 014 in js/)
        -  9.6_A3.1_T4.js - skipped, throwing errors
    - 9.7: ToUin16 (test 015 in js/)
        - S9.7_A3.1_T4.js - skipped, throwing errors
    - 9.8: ToString (test 016 in js/)
    - 9.9: ToObject (test 017 in js/)
        - 9.9_A1 - skipping throwing type errors
        - 9-9_A2 - skipping throwing type errors
 - ch10: Executable Code and Execution Contexts
    - 10.1: Types of Executable Code (test 018 in js/) - skipped whole 10.1.1 folder -  only dealing with "use strict"
    - 10.2: Lexical environments
    - 10.3: Execution Contexts
    - 10.4: Establishing an Execution Context
    - 10.5: Declaration Binding Instantiation
    - 10.6: Arguments Object
 - ch11: Expressions
    - 11.1: Primary expressions
    - 11.2: Left-hand side expressions
    - 11.3: Postfix expression
    - 11.4: Unary operators
    - 11.5: Multiplicative operators
    - 11.6: Additive Operators
    - 11.7: Bitwise Shift Operators
    - 11.8: Relational Operators
    - 11.9: Equality Operators
    - 11.10: Binary Bitwise Operators
    - 11.11: Binary Logic Operators
    - 11.12: Conditional Operators
    - 11.13: Assignment Operators
    - 11.14: Comma Operator
 - ch12: Statements
    - 12.1: Block
    - 12.2: Variable Statement
    - 12.3: Empty Statement
    - 12.4: Expression Statement
    - 12.5: If Statement
    - 12.6: Iteration Statement
    - 12.7: The continue Statement
    - 12.8: The break statement
    - 12.9: The return statement
    - 12.10: The with Statement
    - 12.11: The switch Statement
    - 12.12: Labelled Statement
    - 12.13: Throw Statement
    - 12.14: The Try Statement
 - ch13: Function Definition
    - 13.0: Function Definition
    - 13.1: Strict Mode Restrictions
    - 13.2: Creating Function Objects
 - ch14: Program
    - 14.0: Program
    - 14.1: Directive Prologues and the use strict directive
 - ch15: Standard Built-in ECMAScript objects
    - 15.1: The Global Object
    - 15.2: Object Objects
    - 15.3: Function Objects
    - 15.4: Array Objects
    - 15.5: String Objects
    - 15.6: Boolean Objects
    - 15.7: Number Objects
    - 15.8: The Math Object
    - 15.9: Data Objects
    - 15.10: RegExp
    - 15.11: Error Objects
    - 15.12: The JSON Object

