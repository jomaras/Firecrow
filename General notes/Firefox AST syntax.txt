interface Node { type: string; loc: SourceLocation | null; }
interface SourceLocation { source: string | null; start: Position; end: Position; }
interface Position { line: uint32 >= 1; column: uint32 >= 0; }

interface Program <: Node { type: "Program"; elements: [ Statement ]; }

//The body of the function may be a block statement, or in the case of an expression closure, an expression.
//If the generator flag is true, the function is a generator function, i.e., contains a yield expression in its body
//(other than in a nested function).
//If the expression flag is true, the function is an expression closure and the body field is an expression.
//Note: Expression closures are SpiderMonkey-specific.
interface Function <: Node
{
    id: Identifier | null; params: [ Pattern ]; body: BlockStatement | Expression;
    generator: boolean; expression: boolean;
}

/*                                  STATEMENTS                          */
interface Statement <: Node { }
interface EmptyStatement <: Statement { type: "EmptyStatement"; }
interface BlockStatement <: Statement { type: "BlockStatement"; body: [ Statement ]; }

interface ExpressionStatement <: Statement { type: "ExpressionStatement"; expression: Expression; }

interface IfStatement <: Statement
{
    type: "IfStatement"; test: Expression; consequent: Statement;
    alternate: Statement | null;
}

interface LabeledStatement <: Statement { type: "LabeledStatement"; label: Identifier; body: Statement; }

interface BreakStatement <: Statement { type: "BreakStatement"; label: Identifier | null;}
interface ContinueStatement <: Statement { type: "ContinueStatement"; label: Identifier | null; }

interface WithStatement <: Statement { type: "WithStatement"; object: Expression; body: Statement; }

//The lexical flag is metadata indicating whether the switch statement contains any
//unnested let declarations (and therefore introduces a new lexical scope).
interface SwitchStatement <: Statement
{
    type: "SwitchStatement"; discriminant: Expression; cases: [ SwitchCase ]; lexical: boolean;
}

interface ReturnStatement <: Statement { type: "ReturnStatement"; argument: Expression | null; }

interface ThrowStatement <: Statement { type: "ThrowStatement"; argument: Expression; }

//Note: Multiple catch clauses are SpiderMonkey-specific.
interface TryStatement <: Statement
{
    type: "TryStatement"; block: BlockStatement; handlers: [ CatchClause ]; finalizer: BlockStatement | null;
}

/*                              LOOPS                   */
interface WhileStatement <: Statement { type: "WhileStatement"; test: Expression; body: Statement; }
interface DoWhileStatement <: Statement { type: "DoWhileStatement"; body: Statement; test: Expression; }
interface ForStatement <: Statement
{
    type: "ForStatement"; init: VariableDeclaration | Expression | null;
    test: Expression | null; update: Expression | null; body: Statement;
}

//A for/in statement, or, if each is true, a for each/in statement.
//The for each form is SpiderMonkey-specific.
interface ForInStatement <: Statement
{
    type: "ForInStatement"; left: VariableDeclaration |  Expression;
    right: Expression; body: Statement; each: boolean;
}

//SpiderMonkey-specific.
interface LetStatement <: Statement
{
    type: "LetStatement"; head: [ { id: Pattern, init: Expression | null } ]; body: Statement;
}

//SpiderMonkey-specific.
interface DebuggerStatement <: Statement { type: "DebuggerStatement"; }

/*                          END STATEMENTS                  */


/*                          DECLARATIONS                    */
interface Declaration <: Statement { }

interface FunctionDeclaration <: Function, Declaration
{
    type: "FunctionDeclaration";
    id: Identifier;
    params: [ Pattern ];
    body: BlockStatement | Expression;
    meta: { thunk: boolean, closed: boolean, generator: boolean, expression: boolean };
}
//SpiderMonkey-specific 'let' and 'const'
interface VariableDeclaration <: Declaration
{
    type: "VariableDeclaration"; declarations: [ VariableDeclarator ]; kind: "var" | "let" | "const";
}
interface VariableDeclarator <: Node { type: "VariableDeclarator"; id: Pattern; init: Expression | null; }

/*                          EXPRESSIONS                 */
interface Expression <: Node, Pattern { }
interface ThisExpression <: Expression { type: "ThisExpression"; }
interface ArrayExpression <: Expression { type: "ArrayExpression"; elements: [ Expression | null ]; }

//An object expression. A literal property in an object expression can have either a string or number as its value.
//Ordinary property initializers have a kind value "init"; getters and setters have the kind values "get" and "set",
//respectively.
interface ObjectExpression <: Expression {
    type: "ObjectExpression";
    properties: [ { key: Literal | Identifier,
                    value: Expression,
                    kind: "init" | "get" | "set" } ];
}

interface FunctionExpression <: Function, Expression {
    type: "FunctionExpression";
    id: Identifier | null;
    params: [ Pattern ];
    body: BlockStatement | Expression;
    meta: { thunk: boolean,
            closed: boolean,
            generator: boolean,
            expression: boolean };
}

interface SequenceExpression <: Expression { type: "SequenceExpression"; expressions: [ Expression ]; }

interface UnaryExpression <: Expression
{
    type: "UnaryExpression"; operator: UnaryOperator; prefix: boolean; argument: Expression;
}
interface UnaryOperator <: Node
{
    type: "UnaryOperator"; token: "-" | "+" | "!" | "~" | "typeof" | "void" | "delete";
}

interface BinaryExpression <: Expression
{
    type: "BinaryExpression"; operator: BinaryOperator; left: Expression; right: Expression;
}
interface BinaryOperator <: Node { type: "BinaryOperator"; token: "==" | "!=" | "===" | "!=="
            | "<" | "<=" | ">" | ">=" | "<<" | ">>" | ">>>" | "+" | "-" | "*" | "/" | "%"
            | "|" | "^" | "^" | "in" | "instanceof" | "..";
}

interface AssignmentExpression <: Expression
{
    type: "AssignmentExpression"; operator: AssignmentOperator; left: Expression; right: Expression;
}

interface AssignmentOperator <: Node
{
    type: "AssignmentOperator";
    token: "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "|=" | "^=" | "&=";
}

interface UpdateExpression <: Expression
{
    type: "UpdateExpression"; operator: UpdateOperator; argument: Expression; prefix: boolean;
}
interface UpdateOperator <: Node { type: "UpdateOperator"; token: "++" | "--"; }

interface LogicalExpression <: Expression
{
    type: "LogicalExpression"; operator: LogicalOperator; left: Expression; right: Expression;
}
interface LogicalOperator <: Node { type: "LogicalOperator"; token: "||" | "&&"; }
interface ConditionalExpression <: Expression
{
    type: "ConditionalExpression"; test: Expression; alternate: Expression; consequent: Expression;
}

interface NewExpression <: Expression
{
    type: "NewExpression"; constructor: Expression; arguments: [ Expression ] | null;
}
interface CallExpression <: Expression { type: "CallExpression"; callee: Expression; arguments: [ Expression ]; }

//If computed === true, the node corresponds to a computed e1[e2] expression and property is an Expression.
//If computed === false, the node corresponds to a static e1.x expression and property is an Identifier.
interface MemberExpression <: Expression
{
    type: "MemberExpression"; object: Expression; property: Identifier | Expression; computed : boolean;
}

//SpiderMonkey-specific.
interface YieldExpression <: Expression { argument: Expression | null; }
//SpiderMonkey-specific.
interface ComprehensionExpression <: Expression
{
    body: Expression; blocks: [ ComprehensionBlock ]; filter: Expression | null;
}
//Note: Generators are SpiderMonkey-specific.
interface GeneratorExpression <: Expression
{
    body: Expression; blocks: [ ComprehensionBlock ]; filter: Expression | null;
}
//SpiderMonkey-specific.
interface LetExpression <: Expression
{
    type: "LetExpression"; head: [ { id: Pattern, init: Expression | null } ]; body: Expression;
}

interface Pattern <: Node { }
interface ObjectPattern <: Pattern
{
    type: "ObjectPattern"; properties: [ { key: Literal | Identifier, value: Pattern } ];
}
interface ArrayPattern <: Pattern { type: "ArrayPattern"; elements: [ Identifier | Pattern | null ]; }

interface SwitchCase <: Node { type: "SwitchCase"; test: Expression | null; consequent: [ Statement ]; }

//guard - SpiderMonkey-specific.
interface CatchClause <: Node { type: "CatchClause"; param: Pattern; guard: Expression | null; body: BlockStatement; }
interface ComprehensionBlock <: Node { left: Pattern; right: Expression; each: boolean; }

interface Identifier <: Node, Expression, Pattern { type: "Identifier"; name: string; }
interface Literal <: Node, Expression { type: "Literal"; value: string | boolean | null | number | RegExp; }