- Make it work for other pages!!
   - problem with step


   !!! in jQuery with jQuery.camelCase, the dependency that should be followed is of higher index then the base dependency and it gets ignored
           this in turn causes the selection of another, previous dependency that should not be related (simply because it is of lower index)
           so maybe these indexes should be based not on the order of edge creation, but on let's say the parent statement command id (?) - think more about it
           - or maybe i could just in the dependency inclusion algorithm include dependencies that have the same
           - continue exploring the path:
            - the dependency will be included if it fulfills the current conditions OR if has the same dependency constraint info
            (in node.js@68 uncomment the line, and expand the canFollow dependency function to also include the code from the uncommented line)


   + problem with thisCache[jQuery.camelCase(name)];
        (there is no connection to thisCache and jQuery.camelCase is "imporant") - study more!
        - the problem is that the call expression is evaluated much before the the member expression, so the dependencies created on
        eval member expression are not created, one solution is to create a command on start eval member expression that creates a dependencie from
        the property to the whole member expression (or maybe simpler, if a call expression is a property, create a connection)
        - go to InterpreterSimulator and add

- dependency traversal algorithm in node.js
    - for finding groups, maybe don't go through all dependencies again, but only forward till it is ok, and backward till it is ok

- Make automatic testing for libraries
    - gauss
    - medialize (has errors - fix)
        - Guide: run C:\GitWebStorm\Firecrow\tests\libraries\medialize\tests\debugMedialize.html (and study errors)
        - it seems that i broke something when i added automatic toValue and toString invocation (check it by creating a smaller test suite behaving the same way)
    - sylvester



------------------------------------------------------------------------------------------------------------------------
Testing TO-DO list:
- Test 35 - array problems
- Test 53 - includes return where not necessary

- make a test suite for testing the interpreter, does not do slicing,
  just performs operations, and in the end compares the state of the variables
  with some predefined

- smaller, but more effective test suite
- delete all unnecessary tests
- enable all tests!
- make one unified test that tests both debugSlicing and debugDOM tests

To Do List:

- eval
- ES5 stuff (Object.defineProperty, etc.), canvas
- refactor

***********************************************************************************************************************
- Add the extraction wizard
    - offer simple download
    - offer simple profiling
    - offer extraction
- classList.add; remove...
***********************************************************************************************************************
- Detecting conflicts on dependency graphs